@model ChulWoo.Viewmodel.EmployeeExtendData
@using ChulWoo.Helper;

@{
    ViewBag.Title = "Details";
}

<h2>@Html.DisplayFor(model => model.Employee.Name)</h2>


@if (Model.Employee.ImageData != null)
{
    <img id="image" class="img-thumbnail" width="150" height="150" src='@Url.Action("GetImage", "Employee", new { employeeID = Model.Employee.ID })' />
}

<div>
    <hr />
    <dl class="dl-horizontal">
        @if (Convert.ToInt32(Context.Session["CurrentCulture"]) == 2)
        {
            <dt>
                @Html.DisplayNameFor(model => model.Employee.DepartmentKr)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Employee.DepartmentKr)
            </dd>
        }
        else
        {
            <dt>
                @Html.DisplayNameFor(model => model.Employee.DepartmentVn)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Employee.DepartmentVn)
            </dd>
        }


        <dt>
            @Html.DisplayNameFor(model => model.Employee.EmployeeNo)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.EmployeeNo)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.BankAccount)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.BankAccount)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.BankLocation)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.BankLocation)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.TexNo)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.TexNo)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.JobPosition)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.JobPosition)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.Sex)
        </dt>

        <dd>
            @EnumExtensions.GetDisplayName(Model.Employee.Sex)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.BirthDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.BirthDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.RegistrationNo)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.RegistrationNo)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.RegistrationDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.RegistrationDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.RegistrationPosition)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.RegistrationPosition)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.Tel1)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.Tel1)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.Tel2)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.Tel2)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.Email)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.Email)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.Adress)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.Adress)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.People)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.People)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.Religion)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.Religion)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.Country)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.Country)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.EducationLevel)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.EducationLevel)
        </dd>

        @if (Convert.ToInt32(Context.Session["CurrentCulture"]) == 2)
        {
            <dt>
                @Html.DisplayNameFor(model => model.Employee.MajorKr)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Employee.MajorKr)
            </dd>
        }
        else
        {
            <dt>
                @Html.DisplayNameFor(model => model.Employee.MajorVn)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Employee.MajorVn)
            </dd>
        }

        <dt>
            @Html.DisplayNameFor(model => model.Employee.Marriage)
        </dt>

        <dd>
            @EnumExtensions.GetDisplayName(Model.Employee.Marriage)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.DependentChild)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.DependentChild)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Employee.DependentParents)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Employee.DependentParents)
        </dd>

        @if (Model.Employee.Resign != null)
        {
            <dt>
                @Html.DisplayNameFor(model => model.Employee.Resign.ResignDate)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Employee.Resign.ResignDate)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Employee.Resign.ResignNoteVn)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Employee.Resign.ResignNoteVn)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.Employee.Resign.ResignNoteKr)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Employee.Resign.ResignNoteKr)
            </dd>
        }
    </dl>

    <h3>Contracts</h3>

    <table class="table">
        <tr>
            <th></th>
            <th>StartDate</th>
            <th>EndDate</th>
            <th>Type</th>
            <th>Salary</th>
        </tr>
        @if (Model.Employee.Contracts.Count != 0)
        {

            foreach (var item in Model.Employee.Contracts)
            {
                string selectedRow = "";
                if (item.ID == ViewBag.CourseID)
                {
                    selectedRow = "success";
                }
                <tr class="@selectedRow">
                    <td>
                        @Html.ActionLink("Delete", "Details", new { id = Model.Employee.ID, contractsID = item.ID })
                    </td>
                    <td>
                        @Html.DisplayFor(model => item.StartDate)
                    </td>
                    <td>
                        @Html.DisplayFor(model => item.EndDate)
                    </td>
                    <td>
                        @EnumExtensions.GetDisplayName(item.Type)
                    </td>
                    <td>
                        @Html.DisplayFor(model => item.Salary)
                    </td>
                </tr>
            }
        }
        <form method="post">
            @Html.AntiForgeryToken()

            <tr>
                <th>
                    <input type="submit" value="Add" class="btn btn-default" />
                </th>
                <th>
                    @Html.EditorFor(model => model.Contract.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Contract.StartDate, "", new { @class = "text-danger" })
                </th>
                <th>
                    @Html.EditorFor(model => model.Contract.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Contract.EndDate, "", new { @class = "text-danger" })
                </th>
                <th>
                    @Html.EnumDropDownListFor(model => model.Contract.Type, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Contract.Type, "", new { @class = "text-danger" })
                </th>
                <th>
                    @Html.EditorFor(model => model.Contract.Salary, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Contract.Salary, "", new { @class = "text-danger" })
                </th>
            </tr>
        </form>
    </table>


    @if (Model.Employee.Personnels.Count != 0)
    {
        <h3>Personnels</h3>
        <table class="table">
            <tr>
                <th></th>
                <th>StartDate</th>
                <th>EndDate</th>
                <th>Type</th>
            </tr>
            @foreach (var item in Model.Employee.Personnels)
            {
                string selectedRow = "";
                if (item.ID == ViewBag.CourseID)
                {
                    selectedRow = "success";
                }
                <tr class="@selectedRow">
                    <td>
                        @Html.ActionLink("Select", "Index", new { courseID = item.ID })
                    </td>
                    <td>
                        @Html.DisplayFor(model => item.StartDate)
                    </td>
                    <td>
                        @Html.DisplayFor(model => item.EndDate)
                    </td>
                    <td>
                        @EnumExtensions.GetDisplayName(item.Type)
                    </td>
                </tr>
            }

        </table>
    }
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Employee.ID }) |
    @Html.ActionLink("Back to List", "Index")
</p>
